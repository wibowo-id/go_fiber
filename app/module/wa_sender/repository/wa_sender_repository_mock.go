// Code generated by MockGen. DO NOT EDIT.
// Source: dlh_oss_be/app/module/wa_sender/repository (interfaces: WaSenderRepository)

// Package repository is a generated GoMock package.
package repository

import (
	schema "dlh_oss_be/app/database/schema"
	response "dlh_oss_be/app/module/wa_sender/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWaSenderRepository is a mock of WaSenderRepository interface.
type MockWaSenderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWaSenderRepositoryMockRecorder
}

// MockWaSenderRepositoryMockRecorder is the mock recorder for MockWaSenderRepository.
type MockWaSenderRepositoryMockRecorder struct {
	mock *MockWaSenderRepository
}

// NewMockWaSenderRepository creates a new mock instance.
func NewMockWaSenderRepository(ctrl *gomock.Controller) *MockWaSenderRepository {
	mock := &MockWaSenderRepository{ctrl: ctrl}
	mock.recorder = &MockWaSenderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaSenderRepository) EXPECT() *MockWaSenderRepositoryMockRecorder {
	return m.recorder
}

// SendOtp mocks base method.
func (m *MockWaSenderRepository) SendOtp(arg0, arg1, arg2 string) (response.OtpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOtp", arg0, arg1, arg2)
	ret0, _ := ret[0].(response.OtpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOtp indicates an expected call of SendOtp.
func (mr *MockWaSenderRepositoryMockRecorder) SendOtp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOtp", reflect.TypeOf((*MockWaSenderRepository)(nil).SendOtp), arg0, arg1, arg2)
}

// UpdateOtp mocks base method.
func (m *MockWaSenderRepository) UpdateOtp(arg0, arg1 string) (*schema.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOtp", arg0, arg1)
	ret0, _ := ret[0].(*schema.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOtp indicates an expected call of UpdateOtp.
func (mr *MockWaSenderRepositoryMockRecorder) UpdateOtp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtp", reflect.TypeOf((*MockWaSenderRepository)(nil).UpdateOtp), arg0, arg1)
}
