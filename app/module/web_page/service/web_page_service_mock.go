// Code generated by MockGen. DO NOT EDIT.
// Source: dlh_oss_be/app/module/web_page/service (interfaces: WebPageService)

// Package service is a generated GoMock package.
package service

import (
	schema "dlh_oss_be/app/database/schema"
	request "dlh_oss_be/app/module/web_page/request"
	response "dlh_oss_be/app/module/web_page/response"
	request0 "dlh_oss_be/app/request"
	paginator "dlh_oss_be/utils/paginator"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebPageService is a mock of WebPageService interface.
type MockWebPageService struct {
	ctrl     *gomock.Controller
	recorder *MockWebPageServiceMockRecorder
}

// MockWebPageServiceMockRecorder is the mock recorder for MockWebPageService.
type MockWebPageServiceMockRecorder struct {
	mock *MockWebPageService
}

// NewMockWebPageService creates a new mock instance.
func NewMockWebPageService(ctrl *gomock.Controller) *MockWebPageService {
	mock := &MockWebPageService{ctrl: ctrl}
	mock.recorder = &MockWebPageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebPageService) EXPECT() *MockWebPageServiceMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockWebPageService) All(arg0 request0.Pagination) ([]*response.WebPageResponse, paginator.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]*response.WebPageResponse)
	ret1, _ := ret[1].(paginator.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// All indicates an expected call of All.
func (mr *MockWebPageServiceMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockWebPageService)(nil).All), arg0)
}

// Delete mocks base method.
func (m *MockWebPageService) Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWebPageServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWebPageService)(nil).Delete), arg0, arg1)
}

// FindByUserId mocks base method.
func (m *MockWebPageService) FindByUserId(arg0 string) ([]*schema.WebPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0)
	ret0, _ := ret[0].([]*schema.WebPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockWebPageServiceMockRecorder) FindByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockWebPageService)(nil).FindByUserId), arg0)
}

// Show mocks base method.
func (m *MockWebPageService) Show(arg0 string) (*response.WebPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0)
	ret0, _ := ret[0].(*response.WebPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockWebPageServiceMockRecorder) Show(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockWebPageService)(nil).Show), arg0)
}

// Store mocks base method.
func (m *MockWebPageService) Store(arg0 request.WebPageRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockWebPageServiceMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockWebPageService)(nil).Store), arg0)
}

// Update mocks base method.
func (m *MockWebPageService) Update(arg0 string, arg1 request.WebPageRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWebPageServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWebPageService)(nil).Update), arg0, arg1)
}
