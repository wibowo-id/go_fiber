// Code generated by MockGen. DO NOT EDIT.
// Source: dlh_oss_be/app/module/role/repository (interfaces: RoleRepository)

// Package repository is a generated GoMock package.
package repository

import (
	schema "dlh_oss_be/app/database/schema"
	request "dlh_oss_be/app/module/role/request"
	request0 "dlh_oss_be/app/request"
	paginator "dlh_oss_be/utils/paginator"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRoleRepository) All(arg0 request0.Pagination) ([]*schema.Role, paginator.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]*schema.Role)
	ret1, _ := ret[1].(paginator.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// All indicates an expected call of All.
func (mr *MockRoleRepositoryMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRoleRepository)(nil).All), arg0)
}

// CheckExist mocks base method.
func (m *MockRoleRepository) CheckExist(arg0 string) (*schema.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExist", arg0)
	ret0, _ := ret[0].(*schema.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExist indicates an expected call of CheckExist.
func (mr *MockRoleRepositoryMockRecorder) CheckExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExist", reflect.TypeOf((*MockRoleRepository)(nil).CheckExist), arg0)
}

// Create mocks base method.
func (m *MockRoleRepository) Create(arg0 *schema.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoleRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockRoleRepository) Delete(arg0 request.RoleDeleteRequest, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleRepository)(nil).Delete), arg0, arg1)
}

// FindByUserId mocks base method.
func (m *MockRoleRepository) FindByUserId(arg0 string) ([]*schema.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0)
	ret0, _ := ret[0].([]*schema.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockRoleRepositoryMockRecorder) FindByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockRoleRepository)(nil).FindByUserId), arg0)
}

// FindOne mocks base method.
func (m *MockRoleRepository) FindOne(arg0 string) (*schema.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0)
	ret0, _ := ret[0].(*schema.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockRoleRepositoryMockRecorder) FindOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockRoleRepository)(nil).FindOne), arg0)
}

// Update mocks base method.
func (m *MockRoleRepository) Update(arg0 string, arg1 *schema.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoleRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleRepository)(nil).Update), arg0, arg1)
}
