// Code generated by MockGen. DO NOT EDIT.
// Source: dlh_oss_be/app/module/auth/service (interfaces: AuthService)

// Package service is a generated GoMock package.
package service

import (
	schema "dlh_oss_be/app/database/schema"
	request "dlh_oss_be/app/module/auth/request"
	response "dlh_oss_be/app/module/auth/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockAuthService) ChangePassword(arg0 request.ChangePasswordRequest, arg1 string) (response.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(response.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthServiceMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthService)(nil).ChangePassword), arg0, arg1)
}

// CreateBadanUsaha mocks base method.
func (m *MockAuthService) CreateBadanUsaha(arg0 *request.CreateBadanUsaha) (*request.CreateBadanUsaha, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBadanUsaha", arg0)
	ret0, _ := ret[0].(*request.CreateBadanUsaha)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBadanUsaha indicates an expected call of CreateBadanUsaha.
func (mr *MockAuthServiceMockRecorder) CreateBadanUsaha(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBadanUsaha", reflect.TypeOf((*MockAuthService)(nil).CreateBadanUsaha), arg0)
}

// DeleteBadanUsaha mocks base method.
func (m *MockAuthService) DeleteBadanUsaha(arg0 *request.DeletedAtBy, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBadanUsaha", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBadanUsaha indicates an expected call of DeleteBadanUsaha.
func (mr *MockAuthServiceMockRecorder) DeleteBadanUsaha(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBadanUsaha", reflect.TypeOf((*MockAuthService)(nil).DeleteBadanUsaha), arg0, arg1)
}

// ForgotPassword mocks base method.
func (m *MockAuthService) ForgotPassword(arg0 request.ForgotPasswordRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockAuthServiceMockRecorder) ForgotPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockAuthService)(nil).ForgotPassword), arg0)
}

// GetUserByToken mocks base method.
func (m *MockAuthService) GetUserByToken(arg0 string) (*schema.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", arg0)
	ret0, _ := ret[0].(*schema.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockAuthServiceMockRecorder) GetUserByToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockAuthService)(nil).GetUserByToken), arg0)
}

// Login mocks base method.
func (m *MockAuthService) Login(arg0 request.LoginRequest) (*response.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(*response.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), arg0)
}

// LoginAdmin mocks base method.
func (m *MockAuthService) LoginAdmin(arg0 request.LoginRequest) (*response.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", arg0)
	ret0, _ := ret[0].(*response.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAdmin indicates an expected call of LoginAdmin.
func (mr *MockAuthServiceMockRecorder) LoginAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockAuthService)(nil).LoginAdmin), arg0)
}

// Profile mocks base method.
func (m *MockAuthService) Profile(arg0 string) (*response.UserWithBadanUsaha, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", arg0)
	ret0, _ := ret[0].(*response.UserWithBadanUsaha)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockAuthServiceMockRecorder) Profile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockAuthService)(nil).Profile), arg0)
}

// Register mocks base method.
func (m *MockAuthService) Register(arg0 request.RegisterRequest) (response.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(response.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), arg0)
}

// RequestOTP mocks base method.
func (m *MockAuthService) RequestOTP(arg0 request.OtpRequest) (response.OtpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestOTP", arg0)
	ret0, _ := ret[0].(response.OtpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestOTP indicates an expected call of RequestOTP.
func (mr *MockAuthServiceMockRecorder) RequestOTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestOTP", reflect.TypeOf((*MockAuthService)(nil).RequestOTP), arg0)
}

// UpdateBadanUsaha mocks base method.
func (m *MockAuthService) UpdateBadanUsaha(arg0 *request.UpdateBadanUsaha, arg1 string) (*request.UpdateBadanUsaha, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBadanUsaha", arg0, arg1)
	ret0, _ := ret[0].(*request.UpdateBadanUsaha)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBadanUsaha indicates an expected call of UpdateBadanUsaha.
func (mr *MockAuthServiceMockRecorder) UpdateBadanUsaha(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBadanUsaha", reflect.TypeOf((*MockAuthService)(nil).UpdateBadanUsaha), arg0, arg1)
}

// UpdateFirebaseToken mocks base method.
func (m *MockAuthService) UpdateFirebaseToken(arg0 request.UpdateFirebaseTokenRequest) (response.UpdateFirebaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFirebaseToken", arg0)
	ret0, _ := ret[0].(response.UpdateFirebaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFirebaseToken indicates an expected call of UpdateFirebaseToken.
func (mr *MockAuthServiceMockRecorder) UpdateFirebaseToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFirebaseToken", reflect.TypeOf((*MockAuthService)(nil).UpdateFirebaseToken), arg0)
}

// UpdateProfile mocks base method.
func (m *MockAuthService) UpdateProfile(arg0 *request.UpdateProfileRequest, arg1 uuid.UUID) (response.UpdateProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(response.UpdateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockAuthServiceMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockAuthService)(nil).UpdateProfile), arg0, arg1)
}

// UpdateToken mocks base method.
func (m *MockAuthService) UpdateToken(arg0 string, arg1 uuid.UUID) (response.UpdateProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", arg0, arg1)
	ret0, _ := ret[0].(response.UpdateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockAuthServiceMockRecorder) UpdateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockAuthService)(nil).UpdateToken), arg0, arg1)
}

// VerifyOTP mocks base method.
func (m *MockAuthService) VerifyOTP(arg0 request.OtpConfirmRequest) (response.OtpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", arg0)
	ret0, _ := ret[0].(response.OtpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockAuthServiceMockRecorder) VerifyOTP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockAuthService)(nil).VerifyOTP), arg0)
}
