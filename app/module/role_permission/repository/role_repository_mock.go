// Code generated by MockGen. DO NOT EDIT.
// Source: dlh_oss_be/app/module/role_permission/repository (interfaces: RolePermissionRepository)

// Package repository is a generated GoMock package.
package repository

import (
	schema "dlh_oss_be/app/database/schema"
	response "dlh_oss_be/app/module/role_permission/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRolePermissionRepository is a mock of RolePermissionRepository interface.
type MockRolePermissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRolePermissionRepositoryMockRecorder
}

// MockRolePermissionRepositoryMockRecorder is the mock recorder for MockRolePermissionRepository.
type MockRolePermissionRepositoryMockRecorder struct {
	mock *MockRolePermissionRepository
}

// NewMockRolePermissionRepository creates a new mock instance.
func NewMockRolePermissionRepository(ctrl *gomock.Controller) *MockRolePermissionRepository {
	mock := &MockRolePermissionRepository{ctrl: ctrl}
	mock.recorder = &MockRolePermissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolePermissionRepository) EXPECT() *MockRolePermissionRepositoryMockRecorder {
	return m.recorder
}

// GetMenu mocks base method.
func (m *MockRolePermissionRepository) GetMenu(arg0, arg1 uuid.UUID) ([]*response.MenuPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", arg0, arg1)
	ret0, _ := ret[0].([]*response.MenuPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockRolePermissionRepositoryMockRecorder) GetMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockRolePermissionRepository)(nil).GetMenu), arg0, arg1)
}

// Index mocks base method.
func (m *MockRolePermissionRepository) Index() ([]*schema.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].([]*schema.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index.
func (mr *MockRolePermissionRepositoryMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockRolePermissionRepository)(nil).Index))
}
