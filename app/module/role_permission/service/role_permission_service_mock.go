// Code generated by MockGen. DO NOT EDIT.
// Source: dlh_oss_be/app/module/role_permission/service (interfaces: RolePermissionService)

// Package service is a generated GoMock package.
package service

import (
	schema "dlh_oss_be/app/database/schema"
	response "dlh_oss_be/app/module/role_permission/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRolePermissionService is a mock of RolePermissionService interface.
type MockRolePermissionService struct {
	ctrl     *gomock.Controller
	recorder *MockRolePermissionServiceMockRecorder
}

// MockRolePermissionServiceMockRecorder is the mock recorder for MockRolePermissionService.
type MockRolePermissionServiceMockRecorder struct {
	mock *MockRolePermissionService
}

// NewMockRolePermissionService creates a new mock instance.
func NewMockRolePermissionService(ctrl *gomock.Controller) *MockRolePermissionService {
	mock := &MockRolePermissionService{ctrl: ctrl}
	mock.recorder = &MockRolePermissionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolePermissionService) EXPECT() *MockRolePermissionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRolePermissionService) Create() ([]*schema.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].([]*schema.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRolePermissionServiceMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRolePermissionService)(nil).Create))
}

// Delete mocks base method.
func (m *MockRolePermissionService) Delete() ([]*schema.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].([]*schema.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRolePermissionServiceMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRolePermissionService)(nil).Delete))
}

// FindById mocks base method.
func (m *MockRolePermissionService) FindById() ([]*schema.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById")
	ret0, _ := ret[0].([]*schema.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRolePermissionServiceMockRecorder) FindById() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRolePermissionService)(nil).FindById))
}

// GetMenu mocks base method.
func (m *MockRolePermissionService) GetMenu(arg0, arg1 uuid.UUID) ([]*response.MenuPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", arg0, arg1)
	ret0, _ := ret[0].([]*response.MenuPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockRolePermissionServiceMockRecorder) GetMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockRolePermissionService)(nil).GetMenu), arg0, arg1)
}

// Index mocks base method.
func (m *MockRolePermissionService) Index() ([]*schema.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].([]*schema.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index.
func (mr *MockRolePermissionServiceMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockRolePermissionService)(nil).Index))
}

// Update mocks base method.
func (m *MockRolePermissionService) Update() ([]*schema.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].([]*schema.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRolePermissionServiceMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRolePermissionService)(nil).Update))
}
